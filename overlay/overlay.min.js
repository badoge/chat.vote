let peerConnection,dataChannel,overlayID;async function createOffer(){console.log("creating offer");try{peerConnection=new RTCPeerConnection,peerConnection.onicecandidate=e=>{if(null!=e.candidate)console.log("new ice candidate");else{console.log("last ice candidate"),postOffer(peerConnection.localDescription)}},peerConnection.onconnectionstatechange=e=>{switch(console.log("onconnectionstatechange"),console.log(e),e.currentTarget.connectionState){case"connecting":setTimeout((()=>{getAnswer()}),1e3);break;case"failed":setTimeout((()=>{createOffer()}),1e3);break;default:break}},peerConnection.oniceconnectionstatechange=e=>{console.log("ice connection state: "+e.currentTarget.connectionState)},dataChannel=peerConnection.createDataChannel("overlay"),dataChannel.onopen=e=>{console.log("datachannel open")},dataChannel.onmessage=e=>{console.log("datachannel message"),console.log(e);let n=JSON.parse(e.data);Object.hasOwn(n,"axis")&&("x"==n.axis&&(document.getElementById("donk").style.left=n.value+"%"),"y"==n.axis&&(document.getElementById("donk").style.top=n.value+"%"))}}catch(e){console.log(e)}try{let e=await peerConnection.createOffer();await peerConnection.setLocalDescription(e)}catch(e){console.log(e)}}async function postOffer(e){let n={method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({offer:e})};try{let e=await fetch(`https://overlay.donk.workers.dev/offer/${overlayID}`,n),o=await e.json();console.log(o)}catch(e){console.log(e)}}async function getAnswer(){let e={headers:{Accept:"application/json","Content-Type":"application/json"}};try{let n=await fetch(`https://overlay.donk.workers.dev/${overlayID}/answer`,e),o=await n.json();console.log(o),await peerConnection.setRemoteDescription(JSON.parse(o.data.answer))}catch(e){console.log(e)}}window.onload=function(){overlayID=location.hash?.replace("#","")?.trim(),64==overlayID?.length&&createOffer()};